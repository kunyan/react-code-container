{"version":3,"sources":["../../src/NumberCell.tsx","../../src/CodeCell.tsx","../../src/Row.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["React","lineNumber","onClick","id","key","className","styles","num","code","isHighlight","setClassName","classNames","dangerouslySetInnerHTML","__html","style","row","showLineNumber","handleClick","width","overflow","content","language","selectedLines","onLineNumberClick","onUnSelect","lines","setLines","codes","setCodes","linesRef","hljs","handleUnSelect","event","document","getSloc","line","getSize","prettyBytes","Blob","onClickLine","tmpLines","range","n","Math","index","sortLines","a","rowRenderer","height","isScrolling","onChildScroll","scrollTop","container","header","disableHeight","gridClassName","codeTable","autoHeight","headerHeight","rowHeight","rowCount","length","overscanRowCount","onScroll","rowGetter","process","App","useState","setLanguage","text","setText","setShowLineNumber","setSelectedLines","type","value","onChange","currentTarget","checked","required","join","selecteds","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c4646b96.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface Props {\n  lineNumber: number\n  onClick: (\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => void\n}\n\nconst NumberCell = ({ lineNumber, onClick }: Props) => {\n  return (\n    <td\n      id={`L${lineNumber}`}\n      key={`col-line-number-${lineNumber}`}\n      data-line-number={lineNumber}\n      className={styles.num}\n      onClick={onClick}\n    />\n  )\n}\nexport default React.memo(NumberCell)\n","import * as React from 'react'\nimport classNames from 'classnames'\nimport styles from './styles.module.css'\n\ninterface Props {\n  lineNumber: number\n  code: string\n  isHighlight?: boolean\n}\n\nconst CodeCell = ({ lineNumber, code, isHighlight }: Props) => {\n  const [className, setClassName] = React.useState(\n    `${styles.code} ${styles.codeInner}`\n  )\n  React.useEffect(() => {\n    setClassName(\n      classNames(styles.code, styles.codeInner, {\n        [styles.highlighted]: isHighlight\n      })\n    )\n  }, [isHighlight])\n\n  return (\n    <td\n      id={`LC${lineNumber}`}\n      key={`col-code-${lineNumber}`}\n      className={className}\n      dangerouslySetInnerHTML={{ __html: code }}\n    />\n  )\n}\n\nexport default React.memo(CodeCell)\n","import * as React from 'react'\nimport NumberCell from './NumberCell'\nimport CodeCell from './CodeCell'\n\ninterface Props {\n  row: any\n  style: React.CSSProperties\n  showLineNumber?: boolean\n  onClick?: (\n    lineNumber: number,\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => void\n}\n\nconst Row = ({ style, row, showLineNumber, onClick }: Props) => {\n  const lineNumber = row.lineNumber\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>) => {\n      onClick && onClick(lineNumber, event)\n    },\n    []\n  )\n  return (\n    <tr style={{...style, width: \"100%\", overflow: \"initial\"}}>\n      {showLineNumber && (\n        <NumberCell lineNumber={lineNumber} onClick={handleClick} />\n      )}\n\n      <CodeCell\n        lineNumber={lineNumber}\n        code={row.content}\n        isHighlight={row.isHighlight}\n      />\n    </tr>\n  )\n}\n\nexport default React.memo(Row)\n","import * as React from 'react'\nimport hljs from 'highlight.js'\nimport prettyBytes from 'pretty-bytes'\nimport 'react-virtualized/styles.css'\nimport styles from './styles.module.css'\nimport Row from './Row'\nimport {\n  AutoSizer,\n  WindowScroller,\n  Table,\n  TableRowProps\n} from 'react-virtualized'\n\ninterface Props {\n  code: string\n  language?: string\n  showLineNumber?: boolean\n  selectedLines?: number[]\n  onLineNumberClick?: (lineNumber: number, selectedLines: number[]) => void\n  onUnSelect?: () => void\n}\n\ninterface Row {\n  lineNumber: number\n  content: string\n  isHighlight?: boolean\n}\n\nexport const CodeContainer = ({\n  code,\n  language,\n  showLineNumber = true,\n  selectedLines = [],\n  onLineNumberClick,\n  onUnSelect\n}: Props) => {\n  const [lines, setLines] = React.useState<number[]>(selectedLines)\n  const [codes, setCodes] = React.useState<string[]>([])\n  const linesRef = React.useRef(lines)\n\n  React.useEffect(() => {\n    if (!!language && hljs.getLanguage(language || '')) {\n      setCodes(hljs.highlight(language, code).value.split('\\n'))\n    } else {\n      setCodes(hljs.highlightAuto(code).value.split('\\n'))\n    }\n  }, [code, language])\n\n  const handleUnSelect = React.useCallback((event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      setLines([])\n      linesRef.current = []\n      onUnSelect && onUnSelect()\n    }\n  }, [])\n\n  React.useEffect(() => {\n    document.body.addEventListener('keydown', handleUnSelect)\n    return () => {\n      document.body.removeEventListener('keydown', handleUnSelect)\n    }\n  }, [])\n\n  const getSloc = React.useCallback(() => {\n    return code.split('\\n').filter((line) => line.trim().length > 0).length\n  }, [code])\n\n  const getSize = React.useCallback(() => {\n    return prettyBytes(new Blob([code]).size)\n  }, [code])\n\n  const onClickLine = (\n    lineNumber: number,\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => {\n    const tmpLines = [lineNumber]\n    if (event.shiftKey) {\n      const firstSelectedLine = linesRef.current[0]\n      const range = firstSelectedLine - lineNumber\n      let n = 1\n      while (n <= Math.abs(range)) {\n        const index = range > 0 ? lineNumber + n : lineNumber - n\n        tmpLines.push(index)\n        n++\n      }\n    }\n    const sortLines = tmpLines.sort((a, b) => a - b)\n    setLines(sortLines)\n    linesRef.current = sortLines\n    onLineNumberClick && onLineNumberClick(lineNumber, sortLines)\n  }\n\n  const rowRenderer = ({ index, key, style }: TableRowProps) => {\n    const isHighlight = !!lines.find((lineNumber) => lineNumber === index + 1)\n    const row = {\n      lineNumber: index + 1,\n      content: codes[index],\n      isHighlight\n    }\n\n    return (\n      <Row\n        key={key}\n        row={row}\n        style={style}\n        showLineNumber={showLineNumber}\n        onClick={onClickLine}\n      />\n    )\n  }\n\n  return (\n    <WindowScroller>\n      {({ height, isScrolling, onChildScroll, scrollTop }) => (\n        <div className={styles.container}>\n          <div className={styles.header}>\n            <div>\n              {codes.length} lines ({getSloc()} sloc) | {getSize()}\n            </div>\n          </div>\n          <div className={`${styles.body} hljs`}>\n            <AutoSizer disableHeight>\n              {({ width }) => (\n                <Table\n                  width={width}\n                  height={height}\n                  gridClassName={styles.codeTable}\n                  autoHeight\n                  headerHeight={0}\n                  rowHeight={20}\n                  rowCount={codes.length}\n                  rowRenderer={rowRenderer}\n                  overscanRowCount={20}\n                  scrollTop={scrollTop}\n                  onScroll={onChildScroll}\n                  isScrolling={isScrolling}\n                  rowGetter={({ index }) => codes[index]}\n                />\n              )}\n            </AutoSizer>\n          </div>\n        </div>\n      )}\n    </WindowScroller>\n  )\n}\n\nexport default CodeContainer\n","import { useState } from 'react'\n\nimport CodeContainer from 'react-code-container'\nimport 'react-code-container/dist/index.css'\nimport 'highlight.js/styles/atom-one-dark.css'\n\nconst code = `// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \\`${process.env.PUBLIC_URL}/service-worker.js\\`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}`\n\nconst App = () => {\n  const [language, setLanguage] = useState('jsx')\n  const [text, setText] = useState(code)\n  const [showLineNumber, setShowLineNumber] = useState(true)\n  const [selectedLines, setSelectedLines] = useState<number[]>([4,5,6,7,8]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const content = event.currentTarget.value\n    setText(content)\n  }\n\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLanguage(event.currentTarget.value)\n  }\n\n  const handleChangeLineNumber = () => {\n    setShowLineNumber(!showLineNumber)\n  }\n\n  const handleLineNumberClicked = (lineNumber: number, selecteds: number[]) => {\n    console.log(\"clicked:\", lineNumber)\n    setSelectedLines(selecteds)\n  }\n\n  const handleUnSelect = () => {\n    setSelectedLines([]);\n    console.log('unselect lines');\n  }\n  return (\n    <div className='container'>\n      <main>\n        <h1>React Code Container</h1>\n      <form>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Language</label>\n          <div className='col-sm-10'>\n            <input\n              type='text'\n              className='form-control'\n              value={language}\n              onChange={handleLanguageChange}\n            />\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Show LineNumber</label>\n          <div className='col-sm-10'>\n            <div className='form-check'>\n              <input\n                type='checkbox'\n                className='form-check-input'\n                onChange={handleChangeLineNumber}\n                checked={showLineNumber}\n                required\n              />\n              <label className='form-check-label'>\n                {showLineNumber ? 'On' : 'Off'}\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Selected Lines</label>\n          <div className='col-sm-10'>\n            {selectedLines.join(\",\")}\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Source Code</label>\n          <div className='col-sm-10'>\n            <textarea\n              className='form-control'\n              onChange={handleChange}\n              value={text}\n            />\n          </div>\n        </div>\n      </form>\n\n      <div className='row'>\n        <div className='col-sm'>\n          <CodeContainer\n            code={text}\n            showLineNumber={showLineNumber}\n            language={language}\n            onLineNumberClick={handleLineNumberClicked}\n            selectedLines={selectedLines}\n            onUnSelect={handleUnSelect}\n          />\n        </div>\n      </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}