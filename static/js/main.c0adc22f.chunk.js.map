{"version":3,"sources":["../../src/NumberCell.tsx","../../src/CodeCell.tsx","../../src/Row.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["onClick","id","lineNumber","key","className","styles","isHighlight","React","setClassName","classNames","dangerouslySetInnerHTML","__html","code","onLineNumberClick","row","showLineNumber","event","content","onUnSelect","lines","rows","document","newRows","newRow","setRows","highlightedCodes","hljs","language","index","selectedLines","onClickNum","highlightedLines","range","firstSelectedLine","n","Math","num","line","prettyBytes","Blob","process","App","useState","setLanguage","text","setText","setShowLineNumber","setSelectedLines","type","value","onChange","currentTarget","checked","required","join","selecteds","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c0adc22f.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface Props {\n  lineNumber: number\n  onClick: (\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => void\n}\n\nexport default ({ lineNumber, onClick }: Props) => {\n  return (\n    <td\n      id={`L${lineNumber}`}\n      key={`col-line-number-${lineNumber}`}\n      data-line-number={lineNumber}\n      className={styles.num}\n      onClick={onClick}\n    />\n  )\n}\n","import * as React from 'react'\nimport classNames from 'classnames'\nimport styles from './styles.module.css'\n\ninterface Props {\n  lineNumber: number\n  code: string\n  isHighlight?: boolean\n}\n\nexport default ({ lineNumber, code, isHighlight }: Props) => {\n  const [className, setClassName] = React.useState(\n    `${styles.code} ${styles.codeInner}`\n  )\n  React.useEffect(() => {\n    setClassName(\n      classNames(styles.code, styles.codeInner, {\n        [styles.highlighted]: isHighlight\n      })\n    )\n  }, [isHighlight])\n\n  return (\n    <td\n      id={`LC${lineNumber}`}\n      key={`col-code-${lineNumber}`}\n      className={className}\n      dangerouslySetInnerHTML={{ __html: code }}\n    />\n  )\n}\n","import * as React from 'react'\nimport NumberCell from './NumberCell'\nimport CodeCell from './CodeCell'\n\ninterface Props {\n  row: any\n  showLineNumber?: boolean\n  onLineNumberClick?: (\n    lineNumber: number,\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => void\n}\n\nexport default ({ row, showLineNumber, onLineNumberClick }: Props) => {\n  const lineNumber = row.lineNumber\n\n  const handleClick = (\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => {\n    onLineNumberClick && onLineNumberClick(lineNumber, event)\n  }\n  return (\n    <tr>\n      {showLineNumber && (\n        <NumberCell lineNumber={lineNumber} onClick={handleClick} />\n      )}\n\n      <CodeCell\n        lineNumber={lineNumber}\n        code={row.content}\n        isHighlight={row.isHighlight}\n      />\n    </tr>\n  )\n}\n","import * as React from 'react'\nimport hljs from 'highlight.js'\nimport prettyBytes from 'pretty-bytes'\nimport styles from './styles.module.css'\nimport Row from './Row'\n\ninterface Props {\n  code: string\n  language?: string\n  showLineNumber?: boolean\n  selectedLines?: number[]\n  onLineNumberClick?: (lineNumber: number, selectedLines: number[]) => void\n  onUnSelect?: () => void\n}\n\ninterface Row {\n  lineNumber: number\n  content: string\n  isHighlight?: boolean\n}\n\nexport const CodeContainer = ({\n  code,\n  language,\n  showLineNumber,\n  selectedLines,\n  onLineNumberClick,\n  onUnSelect\n}: Props) => {\n  const [rows, setRows] = React.useState<Row[]>([])\n  const lines = rows.length\n\n  const handleUnSelect = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      const newRows: Row[] = []\n      rows.forEach((row) => {\n        const newRow = { ...row }\n        if (row.isHighlight) {\n          newRow.isHighlight = false\n        }\n        newRows.push(newRow)\n      })\n      setRows(newRows)\n    }\n    onUnSelect && onUnSelect()\n  }\n\n  document.body.addEventListener('keydown', handleUnSelect)\n\n  React.useEffect(() => {\n    const highlightedCodes =\n      !!language && hljs.getLanguage(language || '')\n        ? hljs.highlight(language, code).value\n        : hljs.highlightAuto(code).value\n\n    setRows(\n      highlightedCodes.split('\\n').map((content, index) => ({\n        lineNumber: index + 1,\n        content,\n        isHighlight: selectedLines\n          ? !!selectedLines.find((lineNumber) => lineNumber === index + 1)\n          : false\n      }))\n    )\n  }, [language, code])\n\n  const getSloc = () => {\n    return code.split('\\n').filter((line) => line.trim().length > 0).length\n  }\n\n  const getSize = () => {\n    return prettyBytes(new Blob([code]).size)\n  }\n\n  const onClickNum = (\n    lineNumber: number,\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => {\n    let newRows = []\n    const index = lineNumber - 1\n    const highlightedLines = rows.filter((row) => row.isHighlight)\n    if (event.shiftKey) {\n      const firstSelectedLine = highlightedLines[0]\n      const range = firstSelectedLine.lineNumber - lineNumber\n      const selectedLines = [lineNumber]\n      let n = 0\n      while (n <= Math.abs(range)) {\n        const index = range > 0 ? lineNumber + n : lineNumber - n\n        selectedLines.push(rows[index - 1].lineNumber)\n        n++\n      }\n\n      newRows = rows.map((row) => ({\n        ...row,\n        isHighlight: !!selectedLines.find((num) => num === row.lineNumber)\n      }))\n\n      setRows(newRows)\n    } else {\n      newRows = rows.map((row) => ({\n        ...row,\n        isHighlight: false\n      }))\n      newRows[index].isHighlight = true\n      setRows(newRows)\n    }\n\n    const selectedLines = newRows\n      .filter((row) => !!row.isHighlight)\n      .map((row) => row.lineNumber)\n    onLineNumberClick && onLineNumberClick(lineNumber, selectedLines)\n  }\n\n  const renderRows = () =>\n    rows.map((row, index) => (\n      <Row\n        key={`code-container-row-${index}`}\n        row={row}\n        showLineNumber={showLineNumber}\n        onLineNumberClick={onClickNum}\n      />\n    ))\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div>\n          {lines} lines ({getSloc()} sloc) | {getSize()}\n        </div>\n      </div>\n      <div className={`${styles.body} hljs`}>\n        <table>\n          <tbody>{renderRows()}</tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeContainer\n","import React, { useState } from 'react'\n\nimport CodeContainer from 'code-container'\nimport 'code-container/dist/index.css'\nimport 'highlight.js/styles/atom-one-dark.css'\n\nconst code = `// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \\`${process.env.PUBLIC_URL}/service-worker.js\\`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}`\n\nconst App = () => {\n  const [language, setLanguage] = useState('jsx')\n  const [text, setText] = useState(code)\n  const [showLineNumber, setShowLineNumber] = useState(true)\n  const [selectedLines, setSelectedLines] = useState<number[]>([4,5,6,7,8]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const content = event.currentTarget.value\n    setText(content)\n  }\n\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLanguage(event.currentTarget.value)\n  }\n\n  const handleChangeLineNumber = () => {\n    setShowLineNumber(!showLineNumber)\n  }\n\n  const handleLineNumberClicked = (lineNumber: number, selecteds: number[]) => {\n    console.log(\"clicked:\", lineNumber)\n    setSelectedLines(selecteds)\n  }\n  return (\n    <div className='container'>\n      <main>\n        <h1>React Code Container</h1>\n      <form>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Language</label>\n          <div className='col-sm-10'>\n            <input\n              type='text'\n              className='form-control'\n              value={language}\n              onChange={handleLanguageChange}\n            />\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Show LineNumber</label>\n          <div className='col-sm-10'>\n            <div className='form-check'>\n              <input\n                type='checkbox'\n                className='form-check-input'\n                onChange={handleChangeLineNumber}\n                checked={showLineNumber}\n                required\n              />\n              <label className='form-check-label'>\n                {showLineNumber ? 'On' : 'Off'}\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Selected Lines</label>\n          <div className='col-sm-10'>\n            {selectedLines.join(\",\")}\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Source Code</label>\n          <div className='col-sm-10'>\n            <textarea\n              className='form-control'\n              onChange={handleChange}\n              value={text}\n            />\n          </div>\n        </div>\n      </form>\n\n      <div className='row'>\n        <div className='col-sm'>\n          <CodeContainer\n            code={text}\n            showLineNumber={showLineNumber}\n            language={language}\n            onLineNumberClick={handleLineNumberClicked}\n            selectedLines={selectedLines}\n          />\n        </div>\n      </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}