{"version":3,"sources":["../../src/NumberCell.tsx","../../src/CodeCell.tsx","../../src/Row.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["lineNumber","onClick","id","key","className","styles","code","isHighlight","React","setClassName","classNames","dangerouslySetInnerHTML","__html","row","showLineNumber","onLineNumberClick","content","codeToRows","hljs","language","index","selectedLines","onUnSelect","rows","setRows","lines","handleUnSelect","event","newRows","document","getSloc","line","getSize","prettyBytes","Blob","onClickNum","highlightedLines","range","firstSelectedLine","n","Math","num","process","App","useState","setLanguage","text","setText","setShowLineNumber","setSelectedLines","type","value","onChange","currentTarget","checked","required","join","selecteds","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.428da14d.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface Props {\n  lineNumber: number\n  onClick: (\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => void\n}\n\nexport default ({ lineNumber, onClick }: Props) => {\n  return (\n    <td\n      id={`L${lineNumber}`}\n      key={`col-line-number-${lineNumber}`}\n      data-line-number={lineNumber}\n      className={styles.num}\n      onClick={onClick}\n    />\n  )\n}\n","import * as React from 'react'\nimport classNames from 'classnames'\nimport styles from './styles.module.css'\n\ninterface Props {\n  lineNumber: number\n  code: string\n  isHighlight?: boolean\n}\n\nexport default ({ lineNumber, code, isHighlight }: Props) => {\n  const [className, setClassName] = React.useState(\n    `${styles.code} ${styles.codeInner}`\n  )\n  React.useEffect(() => {\n    setClassName(\n      classNames(styles.code, styles.codeInner, {\n        [styles.highlighted]: isHighlight\n      })\n    )\n  }, [isHighlight])\n\n  return (\n    <td\n      id={`LC${lineNumber}`}\n      key={`col-code-${lineNumber}`}\n      className={className}\n      dangerouslySetInnerHTML={{ __html: code }}\n    />\n  )\n}\n","import * as React from 'react'\nimport NumberCell from './NumberCell'\nimport CodeCell from './CodeCell'\n\ninterface Props {\n  row: any\n  showLineNumber?: boolean\n  onLineNumberClick?: (\n    lineNumber: number,\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => void\n}\n\nexport default ({ row, showLineNumber, onLineNumberClick }: Props) => {\n  const lineNumber = row.lineNumber\n\n  const handleClick = (\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => {\n    onLineNumberClick && onLineNumberClick(lineNumber, event)\n  }\n  return (\n    <tr>\n      {showLineNumber && (\n        <NumberCell lineNumber={lineNumber} onClick={handleClick} />\n      )}\n\n      <CodeCell\n        lineNumber={lineNumber}\n        code={row.content}\n        isHighlight={row.isHighlight}\n      />\n    </tr>\n  )\n}\n","import * as React from 'react'\nimport hljs from 'highlight.js'\nimport prettyBytes from 'pretty-bytes'\nimport styles from './styles.module.css'\nimport Row from './Row'\n\ninterface Props {\n  code: string\n  language?: string\n  showLineNumber?: boolean\n  selectedLines?: number[]\n  onLineNumberClick?: (lineNumber: number, selectedLines: number[]) => void\n  onUnSelect?: () => void\n}\n\ninterface Row {\n  lineNumber: number\n  content: string\n  isHighlight?: boolean\n}\n\nexport const CodeContainer = ({\n  code,\n  language,\n  showLineNumber = true,\n  selectedLines = [],\n  onLineNumberClick,\n  onUnSelect\n}: Props) => {\n  const [rows, setRows] = React.useState<Row[]>([])\n  const lines = rows.length\n\n  const handleUnSelect = React.useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        const newRows: Row[] = codeToRows(code, language)\n        setRows(newRows)\n        onUnSelect && onUnSelect()\n      }\n    },\n    [code, language]\n  )\n\n  document.body.addEventListener('keydown', handleUnSelect)\n\n  React.useEffect(() => {\n    const newRows = codeToRows(code, language, selectedLines)\n    setRows(newRows)\n  }, [language, code])\n\n  const getSloc = React.useCallback(() => {\n    return code.split('\\n').filter((line) => line.trim().length > 0).length\n  }, [code])\n\n  const getSize = React.useCallback(() => {\n    return prettyBytes(new Blob([code]).size)\n  }, [code])\n\n  const onClickNum = (\n    lineNumber: number,\n    event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>\n  ) => {\n    let newRows = []\n    const index = lineNumber - 1\n    const highlightedLines = rows.filter((row) => row.isHighlight)\n    if (event.shiftKey) {\n      const firstSelectedLine = highlightedLines[0]\n      const range = firstSelectedLine.lineNumber - lineNumber\n      const selectedLines = [lineNumber]\n      let n = 0\n      while (n <= Math.abs(range)) {\n        const index = range > 0 ? lineNumber + n : lineNumber - n\n        selectedLines.push(rows[index - 1].lineNumber)\n        n++\n      }\n\n      newRows = rows.map((row) => ({\n        ...row,\n        isHighlight: !!selectedLines.find((num) => num === row.lineNumber)\n      }))\n\n      setRows(newRows)\n    } else {\n      newRows = rows.map((row) => ({\n        ...row,\n        isHighlight: false\n      }))\n      newRows[index].isHighlight = true\n      setRows(newRows)\n    }\n\n    const selectedLines = newRows\n      .filter((row) => !!row.isHighlight)\n      .map((row) => row.lineNumber)\n    onLineNumberClick && onLineNumberClick(lineNumber, selectedLines)\n  }\n\n  const renderRows = () =>\n    rows.map((row, index) => (\n      <Row\n        key={`code-container-row-${index}`}\n        row={row}\n        showLineNumber={showLineNumber}\n        onLineNumberClick={onClickNum}\n      />\n    ))\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div>\n          {lines} lines ({getSloc()} sloc) | {getSize()}\n        </div>\n      </div>\n      <div className={`${styles.body} hljs`}>\n        <table>\n          <tbody>{renderRows()}</tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nconst codeToRows = (\n  code: string,\n  language?: string,\n  selectedLines?: number[]\n) => {\n  const highlightedCodes =\n    !!language && hljs.getLanguage(language || '')\n      ? hljs.highlight(language, code).value\n      : hljs.highlightAuto(code).value\n\n  return highlightedCodes.split('\\n').map((content, index) => ({\n    lineNumber: index + 1,\n    content,\n    isHighlight: selectedLines\n      ? !!selectedLines.find((lineNumber) => lineNumber === index + 1)\n      : false\n  }))\n}\n\nexport default CodeContainer\n","import { useState } from 'react'\n\nimport CodeContainer from 'react-code-container'\nimport 'react-code-container/dist/index.css'\nimport 'highlight.js/styles/atom-one-dark.css'\n\nconst code = `// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \\`${process.env.PUBLIC_URL}/service-worker.js\\`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}`\n\nconst App = () => {\n  const [language, setLanguage] = useState('jsx')\n  const [text, setText] = useState(code)\n  const [showLineNumber, setShowLineNumber] = useState(true)\n  const [selectedLines, setSelectedLines] = useState<number[]>([4,5,6,7,8]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const content = event.currentTarget.value\n    setText(content)\n  }\n\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLanguage(event.currentTarget.value)\n  }\n\n  const handleChangeLineNumber = () => {\n    setShowLineNumber(!showLineNumber)\n  }\n\n  const handleLineNumberClicked = (lineNumber: number, selecteds: number[]) => {\n    console.log(\"clicked:\", lineNumber)\n    setSelectedLines(selecteds)\n  }\n\n  const handleUnSelect = () => {\n    console.log('unselect lines');\n  }\n  return (\n    <div className='container'>\n      <main>\n        <h1>React Code Container</h1>\n      <form>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Language</label>\n          <div className='col-sm-10'>\n            <input\n              type='text'\n              className='form-control'\n              value={language}\n              onChange={handleLanguageChange}\n            />\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Show LineNumber</label>\n          <div className='col-sm-10'>\n            <div className='form-check'>\n              <input\n                type='checkbox'\n                className='form-check-input'\n                onChange={handleChangeLineNumber}\n                checked={showLineNumber}\n                required\n              />\n              <label className='form-check-label'>\n                {showLineNumber ? 'On' : 'Off'}\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Selected Lines</label>\n          <div className='col-sm-10'>\n            {selectedLines.join(\",\")}\n          </div>\n        </div>\n        <div className='form-group row'>\n          <label className='col-sm-2 col-form-label'>Source Code</label>\n          <div className='col-sm-10'>\n            <textarea\n              className='form-control'\n              onChange={handleChange}\n              value={text}\n            />\n          </div>\n        </div>\n      </form>\n\n      <div className='row'>\n        <div className='col-sm'>\n          <CodeContainer\n            code={text}\n            showLineNumber={showLineNumber}\n            language={language}\n            onLineNumberClick={handleLineNumberClicked}\n            selectedLines={selectedLines}\n            onUnSelect={handleUnSelect}\n          />\n        </div>\n      </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}